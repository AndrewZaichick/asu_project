"""
Django settings for asu_app project.

Generated by 'django-admin startproject' using Django 3.0.3.

For full details, see:
https://docs.djangoproject.com/en/3.0/topics/settings/
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from dotenv import load_dotenv  # Подключаем поддержку .env файлов

load_dotenv()  # Загружаем переменные окружения из .env

# Корневая директория проекта
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Секретный ключ приложения, должен храниться в переменных окружения
SECRET_KEY = os.getenv("SECRET_KEY")

# Включает режим отладки (не использовать в проде!)
DEBUG = bool(os.getenv("DEBUG"))

# Список разрешённых хостов (звёздочка — разрешено всё)
ALLOWED_HOSTS = ['*']

# Установленные приложения
INSTALLED_APPS = [
    'django.contrib.admin',  # Админка
    'django.contrib.auth',  # Аутентификация
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',  # Django REST framework
    'rest_framework.authtoken',  # Авторизация по токену
    'corsheaders',  # Для CORS-запросов
    'django_filters',  # Для фильтрации данных в API
    'nested_admin',  # Для вложенного интерфейса в админке

    # Пользовательские приложения
    'api.users',
    'api.subjects',
    'api.groups',
    'api.simple_tests',
    'api.console',
]

# Разрешаем запросы с любых источников (в т.ч. из frontend)
CORS_ORIGIN_ALLOW_ALL = True

# Middleware — цепочка обработки запросов
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Обработка CORS-запросов
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'api.users.middlewares.ActiveUserMiddleware',  # Кастомный middleware для отслеживания онлайн-пользователей
]

# Основной файл маршрутизации URL
ROOT_URLCONF = 'asu_app.urls'

# Шаблонизатор (HTML)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Каталоги с шаблонами
        'APP_DIRS': True,  # Искать шаблоны в папках app/templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Точка входа для WSGI-сервера
WSGI_APPLICATION = 'asu_app.wsgi.application'

# Настройки базы данных (используется PostgreSQL)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('POSTGRES_HOST'),
        'PORT': os.getenv('POSTGRES_PORT'),
    },
}

# Настройки Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',  # Аутентификация по токену
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # По умолчанию доступ только для авторизованных
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',  # Поддержка фильтрации в API
    ),
}

# Валидаторы пароля
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # Запрет на совпадение с именем пользователя
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # Минимальная длина пароля
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # Проверка на слишком распространённый пароль
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # Проверка на полностью числовой пароль
    },
]

# Локализация
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Europe/Minsk'
USE_I18N = True  # Использовать интернационализацию
USE_L10N = True  # Форматирование чисел и дат в соответствии с локалью
USE_TZ = True  # Хранить время в UTC

# Путь к статическим файлам (CSS, JS и т.п.)
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    # Здесь можно подключить, например, директорию со скомпилированным frontend
)
STATIC_ROOT = os.path.join(BASE_DIR, '.', 'public', 'static')

# Путь к загружаемым пользователями файлам (медиа)
MEDIA_ROOT = os.path.join(BASE_DIR, '.', 'public', 'media')
MEDIA_URL = '/media/'

# Пользовательская модель пользователя
AUTH_USER_MODEL = 'api.users.User'

# Тип ID по умолчанию для всех моделей
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# ID дисциплины "Системное администрирование" (используется для проверки прав доступа)
SYSTEM_ADMINISTRATION_SUBJECT_ID = 1
ASOI_SPECIALITY_ID = 1  # ID специальности АСОИ

# Адрес Web-интерфейса GNS3
WEB_GNS_HOST = "http://localhost:3080"

# Время в секундах, по истечении которого пользователь считается оффлайн
USER_ONLINE_TIMEOUT = 300

# Время в секундах, на протяжении которого система хранит последнее время активности пользователя
USER_LASTSEEN_TIMEOUT = 60 * 60 * 24 * 7  # 1 неделя
